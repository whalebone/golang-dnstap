// dnstap: flexible, structured event replication format for DNS software
//
// This file contains the protobuf schemas for the "dnstap" structured event
// replication format for DNS software.

// Written in 2013-2014 by Farsight Security, Inc.
//
// SPDX-License-Identifier: CC0-1.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.15.8
// source: dnstap.proto

package dnstap

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SocketFamily: the network protocol family of a socket. This specifies how
// to interpret "network address" fields.
type SocketFamily int32

const (
	SocketFamily_INET  SocketFamily = 1 // IPv4 (RFC 791)
	SocketFamily_INET6 SocketFamily = 2 // IPv6 (RFC 2460)
)

// Enum value maps for SocketFamily.
var (
	SocketFamily_name = map[int32]string{
		1: "INET",
		2: "INET6",
	}
	SocketFamily_value = map[string]int32{
		"INET":  1,
		"INET6": 2,
	}
)

func (x SocketFamily) Enum() *SocketFamily {
	p := new(SocketFamily)
	*p = x
	return p
}

func (x SocketFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_dnstap_proto_enumTypes[0].Descriptor()
}

func (SocketFamily) Type() protoreflect.EnumType {
	return &file_dnstap_proto_enumTypes[0]
}

func (x SocketFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SocketFamily) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SocketFamily(num)
	return nil
}

// Deprecated: Use SocketFamily.Descriptor instead.
func (SocketFamily) EnumDescriptor() ([]byte, []int) {
	return file_dnstap_proto_rawDescGZIP(), []int{0}
}

// SocketProtocol: the protocol used to transport a DNS message.
type SocketProtocol int32

const (
	SocketProtocol_UDP  SocketProtocol = 1 // DNS over UDP transport (RFC 1035 section 4.2.1)
	SocketProtocol_TCP  SocketProtocol = 2 // DNS over TCP transport (RFC 1035 section 4.2.2)
	SocketProtocol_DOT  SocketProtocol = 3 // DNS over TLS (RFC 7858)
	SocketProtocol_DOH  SocketProtocol = 4 // DNS over HTTPS (RFC 8484)
	SocketProtocol_QUIC SocketProtocol = 5 // DNS over QUIC (RFC 9250)
)

// Enum value maps for SocketProtocol.
var (
	SocketProtocol_name = map[int32]string{
		1: "UDP",
		2: "TCP",
		3: "DOT",
		4: "DOH",
		5: "QUIC",
	}
	SocketProtocol_value = map[string]int32{
		"UDP":  1,
		"TCP":  2,
		"DOT":  3,
		"DOH":  4,
		"QUIC": 5,
	}
)

func (x SocketProtocol) Enum() *SocketProtocol {
	p := new(SocketProtocol)
	*p = x
	return p
}

func (x SocketProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_dnstap_proto_enumTypes[1].Descriptor()
}

func (SocketProtocol) Type() protoreflect.EnumType {
	return &file_dnstap_proto_enumTypes[1]
}

func (x SocketProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SocketProtocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SocketProtocol(num)
	return nil
}

// Deprecated: Use SocketProtocol.Descriptor instead.
func (SocketProtocol) EnumDescriptor() ([]byte, []int) {
	return file_dnstap_proto_rawDescGZIP(), []int{1}
}

// Identifies which field below is filled in.
type Dnstap_Type int32

const (
	Dnstap_MESSAGE Dnstap_Type = 1
)

// Enum value maps for Dnstap_Type.
var (
	Dnstap_Type_name = map[int32]string{
		1: "MESSAGE",
	}
	Dnstap_Type_value = map[string]int32{
		"MESSAGE": 1,
	}
)

func (x Dnstap_Type) Enum() *Dnstap_Type {
	p := new(Dnstap_Type)
	*p = x
	return p
}

func (x Dnstap_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dnstap_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dnstap_proto_enumTypes[2].Descriptor()
}

func (Dnstap_Type) Type() protoreflect.EnumType {
	return &file_dnstap_proto_enumTypes[2]
}

func (x Dnstap_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Dnstap_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Dnstap_Type(num)
	return nil
}

// Deprecated: Use Dnstap_Type.Descriptor instead.
func (Dnstap_Type) EnumDescriptor() ([]byte, []int) {
	return file_dnstap_proto_rawDescGZIP(), []int{0, 0}
}

type Message_Type int32

const (
	// AUTH_QUERY is a DNS query message received from a resolver by an
	// authoritative name server, from the perspective of the authoritative
	// name server.
	Message_AUTH_QUERY Message_Type = 1
	// AUTH_RESPONSE is a DNS response message sent from an authoritative
	// name server to a resolver, from the perspective of the authoritative
	// name server.
	Message_AUTH_RESPONSE Message_Type = 2
	// RESOLVER_QUERY is a DNS query message sent from a resolver to an
	// authoritative name server, from the perspective of the resolver.
	// Resolvers typically clear the RD (recursion desired) bit when
	// sending queries.
	Message_RESOLVER_QUERY Message_Type = 3
	// RESOLVER_RESPONSE is a DNS response message received from an
	// authoritative name server by a resolver, from the perspective of
	// the resolver.
	Message_RESOLVER_RESPONSE Message_Type = 4
	// CLIENT_QUERY is a DNS query message sent from a client to a DNS
	// server which is expected to perform further recursion, from the
	// perspective of the DNS server. The client may be a stub resolver or
	// forwarder or some other type of software which typically sets the RD
	// (recursion desired) bit when querying the DNS server. The DNS server
	// may be a simple forwarding proxy or it may be a full recursive
	// resolver.
	Message_CLIENT_QUERY Message_Type = 5
	// CLIENT_RESPONSE is a DNS response message sent from a DNS server to
	// a client, from the perspective of the DNS server. The DNS server
	// typically sets the RA (recursion available) bit when responding.
	Message_CLIENT_RESPONSE Message_Type = 6
	// FORWARDER_QUERY is a DNS query message sent from a downstream DNS
	// server to an upstream DNS server which is expected to perform
	// further recursion, from the perspective of the downstream DNS
	// server.
	Message_FORWARDER_QUERY Message_Type = 7
	// FORWARDER_RESPONSE is a DNS response message sent from an upstream
	// DNS server performing recursion to a downstream DNS server, from the
	// perspective of the downstream DNS server.
	Message_FORWARDER_RESPONSE Message_Type = 8
	// STUB_QUERY is a DNS query message sent from a stub resolver to a DNS
	// server, from the perspective of the stub resolver.
	Message_STUB_QUERY Message_Type = 9
	// STUB_RESPONSE is a DNS response message sent from a DNS server to a
	// stub resolver, from the perspective of the stub resolver.
	Message_STUB_RESPONSE Message_Type = 10
	// TOOL_QUERY is a DNS query message sent from a DNS software tool to a
	// DNS server, from the perspective of the tool.
	Message_TOOL_QUERY Message_Type = 11
	// TOOL_RESPONSE is a DNS response message received by a DNS software
	// tool from a DNS server, from the perspective of the tool.
	Message_TOOL_RESPONSE Message_Type = 12
	// UPDATE_QUERY is a DNS update query message received from a resolver
	// by an authoritative name server, from the perspective of the
	// authoritative name server.
	Message_UPDATE_QUERY Message_Type = 13
	// UPDATE_RESPONSE is a DNS update response message sent from an
	// authoritative name server to a resolver, from the perspective of the
	// authoritative name server.
	Message_UPDATE_RESPONSE Message_Type = 14
)

// Enum value maps for Message_Type.
var (
	Message_Type_name = map[int32]string{
		1:  "AUTH_QUERY",
		2:  "AUTH_RESPONSE",
		3:  "RESOLVER_QUERY",
		4:  "RESOLVER_RESPONSE",
		5:  "CLIENT_QUERY",
		6:  "CLIENT_RESPONSE",
		7:  "FORWARDER_QUERY",
		8:  "FORWARDER_RESPONSE",
		9:  "STUB_QUERY",
		10: "STUB_RESPONSE",
		11: "TOOL_QUERY",
		12: "TOOL_RESPONSE",
		13: "UPDATE_QUERY",
		14: "UPDATE_RESPONSE",
	}
	Message_Type_value = map[string]int32{
		"AUTH_QUERY":         1,
		"AUTH_RESPONSE":      2,
		"RESOLVER_QUERY":     3,
		"RESOLVER_RESPONSE":  4,
		"CLIENT_QUERY":       5,
		"CLIENT_RESPONSE":    6,
		"FORWARDER_QUERY":    7,
		"FORWARDER_RESPONSE": 8,
		"STUB_QUERY":         9,
		"STUB_RESPONSE":      10,
		"TOOL_QUERY":         11,
		"TOOL_RESPONSE":      12,
		"UPDATE_QUERY":       13,
		"UPDATE_RESPONSE":    14,
	}
)

func (x Message_Type) Enum() *Message_Type {
	p := new(Message_Type)
	*p = x
	return p
}

func (x Message_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dnstap_proto_enumTypes[3].Descriptor()
}

func (Message_Type) Type() protoreflect.EnumType {
	return &file_dnstap_proto_enumTypes[3]
}

func (x Message_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_Type(num)
	return nil
}

// Deprecated: Use Message_Type.Descriptor instead.
func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return file_dnstap_proto_rawDescGZIP(), []int{1, 0}
}

// "Dnstap": this is the top-level dnstap type, which is a "union" type that
// contains other kinds of dnstap payloads, although currently only one type
// of dnstap payload is defined.
// See: https://developers.google.com/protocol-buffers/docs/techniques#union
type Dnstap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DNS server identity.
	// If enabled, this is the identity string of the DNS server which generated
	// this message. Typically this would be the same string as returned by an
	// "NSID" (RFC 5001) query.
	Identity []byte `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	// DNS server version.
	// If enabled, this is the version string of the DNS server which generated
	// this message. Typically this would be the same string as returned by a
	// "version.bind" query.
	Version []byte `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Extra data for this payload.
	// This field can be used for adding an arbitrary byte-string annotation to
	// the payload. No encoding or interpretation is applied or enforced.
	Extra          []byte       `protobuf:"bytes,3,opt,name=extra" json:"extra,omitempty"`
	Rcode          *uint32      `protobuf:"varint,16,opt,name=rcode" json:"rcode,omitempty"`
	ResAction      []byte       `protobuf:"bytes,17,opt,name=res_action,json=resAction" json:"res_action,omitempty"`
	Address        []byte       `protobuf:"bytes,18,opt,name=address" json:"address,omitempty"`
	ClientId       []byte       `protobuf:"bytes,19,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	DeviceId       []byte       `protobuf:"bytes,20,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Region         []byte       `protobuf:"bytes,21,opt,name=region" json:"region,omitempty"`
	SubscriptionId []byte       `protobuf:"bytes,22,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	GroupId        []byte       `protobuf:"bytes,23,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SegmentId      []byte       `protobuf:"bytes,24,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	BrandId        []byte       `protobuf:"bytes,25,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
	Tag            []byte       `protobuf:"bytes,26,opt,name=tag" json:"tag,omitempty"`
	Ratelimited    *bool        `protobuf:"varint,27,opt,name=ratelimited" json:"ratelimited,omitempty"`
	EdeCode        *int32       `protobuf:"zigzag32,28,opt,name=ede_code,json=edeCode" json:"ede_code,omitempty"`
	ResponseTime   *uint64      `protobuf:"varint,29,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
	Type           *Dnstap_Type `protobuf:"varint,15,req,name=type,enum=dnstap.Dnstap_Type" json:"type,omitempty"`
	// One of the following will be filled in.
	Message       *Message `protobuf:"bytes,14,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dnstap) Reset() {
	*x = Dnstap{}
	mi := &file_dnstap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dnstap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dnstap) ProtoMessage() {}

func (x *Dnstap) ProtoReflect() protoreflect.Message {
	mi := &file_dnstap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dnstap.ProtoReflect.Descriptor instead.
func (*Dnstap) Descriptor() ([]byte, []int) {
	return file_dnstap_proto_rawDescGZIP(), []int{0}
}

func (x *Dnstap) GetIdentity() []byte {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Dnstap) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Dnstap) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Dnstap) GetRcode() uint32 {
	if x != nil && x.Rcode != nil {
		return *x.Rcode
	}
	return 0
}

func (x *Dnstap) GetResAction() []byte {
	if x != nil {
		return x.ResAction
	}
	return nil
}

func (x *Dnstap) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Dnstap) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *Dnstap) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Dnstap) GetRegion() []byte {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Dnstap) GetSubscriptionId() []byte {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *Dnstap) GetGroupId() []byte {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *Dnstap) GetSegmentId() []byte {
	if x != nil {
		return x.SegmentId
	}
	return nil
}

func (x *Dnstap) GetBrandId() []byte {
	if x != nil {
		return x.BrandId
	}
	return nil
}

func (x *Dnstap) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Dnstap) GetRatelimited() bool {
	if x != nil && x.Ratelimited != nil {
		return *x.Ratelimited
	}
	return false
}

func (x *Dnstap) GetEdeCode() int32 {
	if x != nil && x.EdeCode != nil {
		return *x.EdeCode
	}
	return 0
}

func (x *Dnstap) GetResponseTime() uint64 {
	if x != nil && x.ResponseTime != nil {
		return *x.ResponseTime
	}
	return 0
}

func (x *Dnstap) GetType() Dnstap_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Dnstap_MESSAGE
}

func (x *Dnstap) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// Message: a wire-format (RFC 1035 section 4) DNS message and associated
// metadata. Applications generating "Message" payloads should follow
// certain requirements based on the MessageType, see below.
type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One of the Type values described above.
	Type *Message_Type `protobuf:"varint,1,req,name=type,enum=dnstap.Message_Type" json:"type,omitempty"`
	// One of the SocketFamily values described above.
	SocketFamily *SocketFamily `protobuf:"varint,2,opt,name=socket_family,json=socketFamily,enum=dnstap.SocketFamily" json:"socket_family,omitempty"`
	// One of the SocketProtocol values described above.
	SocketProtocol *SocketProtocol `protobuf:"varint,3,opt,name=socket_protocol,json=socketProtocol,enum=dnstap.SocketProtocol" json:"socket_protocol,omitempty"`
	// The network address of the message initiator.
	// For SocketFamily INET, this field is 4 octets (IPv4 address).
	// For SocketFamily INET6, this field is 16 octets (IPv6 address).
	QueryAddress []byte `protobuf:"bytes,4,opt,name=query_address,json=queryAddress" json:"query_address,omitempty"`
	// The network address of the message responder.
	// For SocketFamily INET, this field is 4 octets (IPv4 address).
	// For SocketFamily INET6, this field is 16 octets (IPv6 address).
	ResponseAddress []byte `protobuf:"bytes,5,opt,name=response_address,json=responseAddress" json:"response_address,omitempty"`
	// The transport port of the message initiator.
	// This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
	QueryPort *uint32 `protobuf:"varint,6,opt,name=query_port,json=queryPort" json:"query_port,omitempty"`
	// The transport port of the message responder.
	// This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
	ResponsePort *uint32 `protobuf:"varint,7,opt,name=response_port,json=responsePort" json:"response_port,omitempty"`
	// The time at which the DNS query message was sent or received, depending
	// on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
	// This is the number of seconds since the UNIX epoch.
	QueryTimeSec *uint64 `protobuf:"varint,8,opt,name=query_time_sec,json=queryTimeSec" json:"query_time_sec,omitempty"`
	// The time at which the DNS query message was sent or received.
	// This is the seconds fraction, expressed as a count of nanoseconds.
	QueryTimeNsec *uint32 `protobuf:"fixed32,9,opt,name=query_time_nsec,json=queryTimeNsec" json:"query_time_nsec,omitempty"`
	// The initiator's original wire-format DNS query message, verbatim.
	QueryMessage []byte `protobuf:"bytes,10,opt,name=query_message,json=queryMessage" json:"query_message,omitempty"`
	// The "zone" or "bailiwick" pertaining to the DNS query message.
	// This is a wire-format DNS domain name.
	QueryZone []byte `protobuf:"bytes,11,opt,name=query_zone,json=queryZone" json:"query_zone,omitempty"`
	// The time at which the DNS response message was sent or received,
	// depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
	// CLIENT_RESPONSE.
	// This is the number of seconds since the UNIX epoch.
	ResponseTimeSec *uint64 `protobuf:"varint,12,opt,name=response_time_sec,json=responseTimeSec" json:"response_time_sec,omitempty"`
	// The time at which the DNS response message was sent or received.
	// This is the seconds fraction, expressed as a count of nanoseconds.
	ResponseTimeNsec *uint32 `protobuf:"fixed32,13,opt,name=response_time_nsec,json=responseTimeNsec" json:"response_time_nsec,omitempty"`
	// The responder's original wire-format DNS response message, verbatim.
	ResponseMessage []byte `protobuf:"bytes,14,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_dnstap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_dnstap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_dnstap_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetType() Message_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Message_AUTH_QUERY
}

func (x *Message) GetSocketFamily() SocketFamily {
	if x != nil && x.SocketFamily != nil {
		return *x.SocketFamily
	}
	return SocketFamily_INET
}

func (x *Message) GetSocketProtocol() SocketProtocol {
	if x != nil && x.SocketProtocol != nil {
		return *x.SocketProtocol
	}
	return SocketProtocol_UDP
}

func (x *Message) GetQueryAddress() []byte {
	if x != nil {
		return x.QueryAddress
	}
	return nil
}

func (x *Message) GetResponseAddress() []byte {
	if x != nil {
		return x.ResponseAddress
	}
	return nil
}

func (x *Message) GetQueryPort() uint32 {
	if x != nil && x.QueryPort != nil {
		return *x.QueryPort
	}
	return 0
}

func (x *Message) GetResponsePort() uint32 {
	if x != nil && x.ResponsePort != nil {
		return *x.ResponsePort
	}
	return 0
}

func (x *Message) GetQueryTimeSec() uint64 {
	if x != nil && x.QueryTimeSec != nil {
		return *x.QueryTimeSec
	}
	return 0
}

func (x *Message) GetQueryTimeNsec() uint32 {
	if x != nil && x.QueryTimeNsec != nil {
		return *x.QueryTimeNsec
	}
	return 0
}

func (x *Message) GetQueryMessage() []byte {
	if x != nil {
		return x.QueryMessage
	}
	return nil
}

func (x *Message) GetQueryZone() []byte {
	if x != nil {
		return x.QueryZone
	}
	return nil
}

func (x *Message) GetResponseTimeSec() uint64 {
	if x != nil && x.ResponseTimeSec != nil {
		return *x.ResponseTimeSec
	}
	return 0
}

func (x *Message) GetResponseTimeNsec() uint32 {
	if x != nil && x.ResponseTimeNsec != nil {
		return *x.ResponseTimeNsec
	}
	return 0
}

func (x *Message) GetResponseMessage() []byte {
	if x != nil {
		return x.ResponseMessage
	}
	return nil
}

var File_dnstap_proto protoreflect.FileDescriptor

const file_dnstap_proto_rawDesc = "" +
	"\n" +
	"\fdnstap.proto\x12\x06dnstap\"\xd0\x04\n" +
	"\x06Dnstap\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\fR\bidentity\x12\x18\n" +
	"\aversion\x18\x02 \x01(\fR\aversion\x12\x14\n" +
	"\x05extra\x18\x03 \x01(\fR\x05extra\x12\x14\n" +
	"\x05rcode\x18\x10 \x01(\rR\x05rcode\x12\x1d\n" +
	"\n" +
	"res_action\x18\x11 \x01(\fR\tresAction\x12\x18\n" +
	"\aaddress\x18\x12 \x01(\fR\aaddress\x12\x1b\n" +
	"\tclient_id\x18\x13 \x01(\fR\bclientId\x12\x1b\n" +
	"\tdevice_id\x18\x14 \x01(\fR\bdeviceId\x12\x16\n" +
	"\x06region\x18\x15 \x01(\fR\x06region\x12'\n" +
	"\x0fsubscription_id\x18\x16 \x01(\fR\x0esubscriptionId\x12\x19\n" +
	"\bgroup_id\x18\x17 \x01(\fR\agroupId\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x18 \x01(\fR\tsegmentId\x12\x19\n" +
	"\bbrand_id\x18\x19 \x01(\fR\abrandId\x12\x10\n" +
	"\x03tag\x18\x1a \x01(\fR\x03tag\x12 \n" +
	"\vratelimited\x18\x1b \x01(\bR\vratelimited\x12\x19\n" +
	"\bede_code\x18\x1c \x01(\x11R\aedeCode\x12#\n" +
	"\rresponse_time\x18\x1d \x01(\x04R\fresponseTime\x12'\n" +
	"\x04type\x18\x0f \x02(\x0e2\x13.dnstap.Dnstap.TypeR\x04type\x12)\n" +
	"\amessage\x18\x0e \x01(\v2\x0f.dnstap.MessageR\amessage\"\x13\n" +
	"\x04Type\x12\v\n" +
	"\aMESSAGE\x10\x01\"\xf2\x06\n" +
	"\aMessage\x12(\n" +
	"\x04type\x18\x01 \x02(\x0e2\x14.dnstap.Message.TypeR\x04type\x129\n" +
	"\rsocket_family\x18\x02 \x01(\x0e2\x14.dnstap.SocketFamilyR\fsocketFamily\x12?\n" +
	"\x0fsocket_protocol\x18\x03 \x01(\x0e2\x16.dnstap.SocketProtocolR\x0esocketProtocol\x12#\n" +
	"\rquery_address\x18\x04 \x01(\fR\fqueryAddress\x12)\n" +
	"\x10response_address\x18\x05 \x01(\fR\x0fresponseAddress\x12\x1d\n" +
	"\n" +
	"query_port\x18\x06 \x01(\rR\tqueryPort\x12#\n" +
	"\rresponse_port\x18\a \x01(\rR\fresponsePort\x12$\n" +
	"\x0equery_time_sec\x18\b \x01(\x04R\fqueryTimeSec\x12&\n" +
	"\x0fquery_time_nsec\x18\t \x01(\aR\rqueryTimeNsec\x12#\n" +
	"\rquery_message\x18\n" +
	" \x01(\fR\fqueryMessage\x12\x1d\n" +
	"\n" +
	"query_zone\x18\v \x01(\fR\tqueryZone\x12*\n" +
	"\x11response_time_sec\x18\f \x01(\x04R\x0fresponseTimeSec\x12,\n" +
	"\x12response_time_nsec\x18\r \x01(\aR\x10responseTimeNsec\x12)\n" +
	"\x10response_message\x18\x0e \x01(\fR\x0fresponseMessage\"\x95\x02\n" +
	"\x04Type\x12\x0e\n" +
	"\n" +
	"AUTH_QUERY\x10\x01\x12\x11\n" +
	"\rAUTH_RESPONSE\x10\x02\x12\x12\n" +
	"\x0eRESOLVER_QUERY\x10\x03\x12\x15\n" +
	"\x11RESOLVER_RESPONSE\x10\x04\x12\x10\n" +
	"\fCLIENT_QUERY\x10\x05\x12\x13\n" +
	"\x0fCLIENT_RESPONSE\x10\x06\x12\x13\n" +
	"\x0fFORWARDER_QUERY\x10\a\x12\x16\n" +
	"\x12FORWARDER_RESPONSE\x10\b\x12\x0e\n" +
	"\n" +
	"STUB_QUERY\x10\t\x12\x11\n" +
	"\rSTUB_RESPONSE\x10\n" +
	"\x12\x0e\n" +
	"\n" +
	"TOOL_QUERY\x10\v\x12\x11\n" +
	"\rTOOL_RESPONSE\x10\f\x12\x10\n" +
	"\fUPDATE_QUERY\x10\r\x12\x13\n" +
	"\x0fUPDATE_RESPONSE\x10\x0e*#\n" +
	"\fSocketFamily\x12\b\n" +
	"\x04INET\x10\x01\x12\t\n" +
	"\x05INET6\x10\x02*>\n" +
	"\x0eSocketProtocol\x12\a\n" +
	"\x03UDP\x10\x01\x12\a\n" +
	"\x03TCP\x10\x02\x12\a\n" +
	"\x03DOT\x10\x03\x12\a\n" +
	"\x03DOH\x10\x04\x12\b\n" +
	"\x04QUIC\x10\x05B+Z)github.com/whalebone/golang-dnstap;dnstap"

var (
	file_dnstap_proto_rawDescOnce sync.Once
	file_dnstap_proto_rawDescData []byte
)

func file_dnstap_proto_rawDescGZIP() []byte {
	file_dnstap_proto_rawDescOnce.Do(func() {
		file_dnstap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dnstap_proto_rawDesc), len(file_dnstap_proto_rawDesc)))
	})
	return file_dnstap_proto_rawDescData
}

var file_dnstap_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_dnstap_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dnstap_proto_goTypes = []any{
	(SocketFamily)(0),   // 0: dnstap.SocketFamily
	(SocketProtocol)(0), // 1: dnstap.SocketProtocol
	(Dnstap_Type)(0),    // 2: dnstap.Dnstap.Type
	(Message_Type)(0),   // 3: dnstap.Message.Type
	(*Dnstap)(nil),      // 4: dnstap.Dnstap
	(*Message)(nil),     // 5: dnstap.Message
}
var file_dnstap_proto_depIdxs = []int32{
	2, // 0: dnstap.Dnstap.type:type_name -> dnstap.Dnstap.Type
	5, // 1: dnstap.Dnstap.message:type_name -> dnstap.Message
	3, // 2: dnstap.Message.type:type_name -> dnstap.Message.Type
	0, // 3: dnstap.Message.socket_family:type_name -> dnstap.SocketFamily
	1, // 4: dnstap.Message.socket_protocol:type_name -> dnstap.SocketProtocol
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_dnstap_proto_init() }
func file_dnstap_proto_init() {
	if File_dnstap_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dnstap_proto_rawDesc), len(file_dnstap_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dnstap_proto_goTypes,
		DependencyIndexes: file_dnstap_proto_depIdxs,
		EnumInfos:         file_dnstap_proto_enumTypes,
		MessageInfos:      file_dnstap_proto_msgTypes,
	}.Build()
	File_dnstap_proto = out.File
	file_dnstap_proto_goTypes = nil
	file_dnstap_proto_depIdxs = nil
}
